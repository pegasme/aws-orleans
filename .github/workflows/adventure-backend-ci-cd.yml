name: Adventure CI/CD pipeline

on:
  pull_request:
    branches:
      - main
    paths:
      - 'src/adventure/**'
      - '.github/workflows/adventure-backend-ci-cd.yml'
      - '_infra/**'

env:
  AWS_REGION: us-east-1
  IMAGE_TAG: latest

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'
      
      - name: Install dependencies for Backend
        run: dotnet restore
        working-directory: src/adventure/src/

      - name: Build Backend
        run: dotnet build --no-restore --configuration Release
        working-directory: src/adventure/src/
      
      - name: Run tests
        run: dotnet test --no-build --verbosity normal --configuration Release
        working-directory: src/adventure/src/AdventureClient.Services.UnitTests

  push:
      runs-on: ubuntu-latest
      needs: build
      environment: default
      name: Push to ECR
      steps: 
        - name: Checkout repo
          uses: actions/checkout@v5
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v5
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
        
        - name: Login to ECR repo
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2
        
        - name: Build, tag and push Client image to ECR
          working-directory: src/adventure/src
          env:
            ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
            ECR_REPOSITORY: ${{ vars.AWS_ECR_NAME }}
            IMAGE_TAG: ${{github.sha}}
          run: |
                echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --file ./AdventureClient/Dockerfile .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    